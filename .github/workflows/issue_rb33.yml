name: ruby 3.3 transient_heap and NoMethoError format

on:
  push:
    branches: ['acme']
  workflow_dispatch:

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  testruby:
    runs-on: ubuntu-22.04

    steps:
      - name: begin
        run: |
          echo '--- start [testruby] job. hello >>>' $PWD
          echo '// ls $CWD is empty'
          ls . -1lah

      - name: Checkout repository from github
        if: true
        uses: actions/checkout@v4
        with:
          # repository: vim/vim
          repository: svardew/vim
          # ref: 9.0.2173, 2023-12-18
          ref: 062bb6b9099f4c92e10465e5ff98db092a3eac1b
          path: ./vim

      - name: setup ruby
        if: true
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby-3.3.0-rc1

      - name: set ruby-3.3 environment values
        id: rb33env
        if: true
        run: |
          echo '// which ruby and ruby version'
          which ruby
          ruby -v
          echo '// locate libruby.so.3.3'
          find /opt -name 'libruby.so*'
          echo '// locate pkgconfig file (ruby-x.x.pc)'
          ruby -rrbconfig -e 'puts Dir.glob(RbConfig::CONFIG["libdir"]+"/**/ruby*.pc")'
          echo '// set ld_library_path and pkg_config_path to GITHUB_OUTPUTS'
          rb33libdir=$(ruby -rrbconfig -e 'print RbConfig::CONFIG[%q<libdir>]')
          rb33pkgconfigdir=${rb33libdir}'/pkgconfig'
          echo "rb33_ldlibrarypath=${rb33libdir}" >> $GITHUB_OUTPUT
          echo "rb33_pkgconfigpath=${rb33pkgconfigdir}" >> $GITHUB_OUTPUT

      - name: check github_output values
        if: true
        run: |
          echo ${{ steps.rb33env.outputs.rb33_pkgconfigpath }}, PKG_CONFIG_PATH
          echo ${{ steps.rb33env.outputs.rb33_ldlibrarypath }}, LD_LIBRARY_PATH
          echo "force fail.."
          /bin/false

      - name: prepare issue tests. Test_cmd_ruby_works, Test_ruby_nomethoderror_format
        run: |
          echo "// these 2 test may fail"
          touch test_yy1cmdrubywork.vim
          cat <<'HERE_DOCU_MENT' | sed 's/^:\ //' > test_yy1cmdrubywork.vim
          : func Test_cmd_ruby_works()
          :   ruby 1+2+3
          : endfunc
          HERE_DOCU_MENT
          touch test_yy2nomethoderror.vim
          cat <<'HERE_DOCU_MENT' | sed 's/^:\ //' > test_yy2nomethoderror.vim
          : func Test_ruby_nomethoderror_format()
          :   call assert_fails('ruby print nil.hjkl',
          :         \           "NoMethodError: undefined method `hjkl' for nil:NilClass")
          : endfunc
          HERE_DOCU_MENT
          echo "// cat 2 test file"
          cat test_yy1cmdrubywork.vim
          cat test_yy2nomethoderror.vim

      - name: current vim with ruby-3.3.0-rc1
        if: false
        run: echo 'check current vim with ruby-3.3.0 issue'

      - name: build vim with static link rb33rc1, test issue tests
        if: false
        run: |
          cp -R ./vim vim-rb33yes
          cp test_yy*.vim ./vim-rb33yes/src/testdir/
          cd ./vim-rb33yes/
          export PKG_CONFIG_PATH=${{ steps.rb33env.outputs.rb33_pkgconfigpath }}
          export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          ./configure --disable-gui --disable-libsodium --enable-rubyinterp=yes
          make
          cd src/testdir
          make test_yy1cmdrubywork.res
          make test_yy2nomethoderror.res
          echo '// expect: vim +ruby33/yes fail NoMethoderror, but success :ruby'
          cat messages

      - name: build vim with dynamic link rb33rc1, test issue tests
        if: false
        run: |
          cp -R ./vim vim-rb33dyn
          cp test_yy*.vim ./vim-rb33dyn/src/testdir/
          cd ./vim-rb33dyn/
          export PKG_CONFIG_PATH=${{ steps.rb33env.outputs.rb33_pkgconfigpath }}
          export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          ./configure --disable-gui --disable-libsodium --enable-rubyinterp=dynamic
          make
          cd src/testdir
          make test_yy1cmdrubywork.res
          make test_yy2nomethoderror.res
          echo '// expect: vim +ruby33/dyn fail both NoMethoderror and :ruby'
          cat messages

      - name: prepare patch for if_ruby.c, test_ruby.vim
        if: true
        shell: bash {0}
        run: |
          echo "// these 2 patch may fix"
          # diff -U0 orig changed > patch-xxx
          # patch orig --input /path/to/patch-xxx
          touch patch-if_ruby
          cat <<'HERE_DOCU_MENT' | sed 's/^:\ //' > patch-if_ruby
          : --- ./if_ruby.c.orig
          : +++ ./if_ruby.c.mod
          : @@ -86 +86 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION =< 32
          : @@ -459 +459 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION =< 32
          : @@ -494 +494 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION =< 32
          : @@ -564 +564 @@
          : -#  if RUBY_VERSION >= 26
          : +#  if RUBY_VERSION >= 26 && RUBY_VERSION =< 32
          : @@ -721 +721 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION =< 32
          HERE_DOCU_MENT
          touch patch-test_ruby
          touch test_ruby.vim.mod
          sed '/NoMethodError/ s/nil:NilClass/nil/ ;' ./vim/src/testdir/test_ruby.vim > test_ruby.vim.mod
          diff -U 0 ./vim/src/testdir/test_ruby.vim ./test_ruby.vim.mod > patch-test_ruby
          rm ./test_ruby.vim.mod
          echo "// cat patch-if_ruby"
          cat patch-if_ruby
          echo "// cat patch-test_ruby"
          cat patch-test_ruby

      - name: build patched vim with static link rb33rc1, check if test_ruby.vim pass
        if: false
        run: |
          mkdir vim-rb33yes-patched
          cp -R ./vim/* ./vim-rb33yes-patched
          cd ./vim-rb33yes-patched/
          patch src/if_ruby.c --input ../patch-if_ruby
          patch src/testdir/test_ruby.vim --input ../patch-test_ruby
          export PKG_CONFIG_PATH=${{ steps.rb33env.outputs.rb33_pkgconfigpath }}
          export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          ./configure --disable-gui --disable-libsodium --enable-rubyinterp=yes
          make
          cd src/testdir
          make test_ruby.res
          echo '// expect: patched vim +ruby33/yes success test_ruby.vim'
          cat messages

      - name: build patched vim with dynamic link rb33rc1, check if test_ruby.vim pass
        if: false
        run: |
          mkdir vim-rb33dyn-patched
          cp -R ./vim/* ./vim-rb33dyn-patched
          cd ./vim-rb33dyn-patched/
          patch src/if_ruby.c --input ../patch-if_ruby
          patch src/testdir/test_ruby.vim --input ../patch-test_ruby
          export PKG_CONFIG_PATH=${{ steps.rb33env.outputs.rb33_pkgconfigpath }}
          export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          ./configure --disable-gui --disable-libsodium --enable-rubyinterp=dynamic
          make
          cd src/testdir
          make test_ruby.res
          echo '// expect: patched vim +ruby33/dyn success test_ruby.vim'
          cat messages

      - name: close
        if: true
        run: |
          echo "// ls $CWD"
          ls -plha .
          echo "// find *.res for test-success"
          find . -type f -name '*.res'
          # echo "$rb33_pkgconfigpath"
          # echo "$rb33_ldlibrarypath"
          echo '--- close [testruby] job. <<<' $PWD

# vim: tw=2 :
