name: linux_ruby_github_ci

on: workflow_dispatch

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  vim_patch:
    runs-on: ubuntu-latest
    env:
      # ref: v9.0.2138
      REF: fda700cb04612fe2f9301a9ba820309175decabf

    steps:
      - run: mkdir patch_and_test

      - name: Checkout vim
        uses: actions/checkout@v4
        with:
          repository: svardew/vim
          ref: ${{ env.REF }}
          path: ./vim

      - name: Prepare patches
        id: patches
        if: true
        shell: bash {0}
        run: |
          echo '/* File: patch-if_ruby'
          echo ' * ruby-3.3 remove transient_heap.'
          echo ' * this patch disable rb_ary_detransient, etc.'
          echo ' */'
          touch patch-if_ruby
          cat <<'HERE_DOCU_MENT' | sed 's/^:\ //' > patch-if_ruby
          : --- ./if_ruby.c.orig
          : +++ ./if_ruby.c.mod
          : @@ -86 +86 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION <= 32
          : @@ -459 +459 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION <= 32
          : @@ -494 +494 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION <= 32
          : @@ -564 +564 @@
          : -#  if RUBY_VERSION >= 26
          : +#  if RUBY_VERSION >= 26 && RUBY_VERSION <= 32
          : @@ -721 +721 @@
          : -# if RUBY_VERSION >= 26
          : +# if RUBY_VERSION >= 26 && RUBY_VERSION <= 32
          HERE_DOCU_MENT
          echo '/* File: patch-test_ruby'
          echo ' * ruby-3.3 change NoMethodError format.'
          echo ' * this patch loose pattern in Test_ruby_Vim_buffer_get()'
          echo ' */'
          touch patch-test_ruby
          cp ./vim/src/testdir/test_ruby.vim ./test_ruby.vim.orig
          cp ./vim/src/testdir/test_ruby.vim ./test_ruby.vim.mod
          sed -i '/NoMethodError/ s,nil:NilClass,nil, ;' ./test_ruby.vim.mod
          diff -U 0 ./test_ruby.vim.orig ./test_ruby.vim.mod > patch-test_ruby
          rm ./test_ruby.vim.*
          mv patch-* ./patch_and_test

      - name: Prepare tests for ruby-3.3 issue
        id: tests
        if: true
        shell: bash {0}
        run: |
          echo '/* File: test_yy_loose_nomethoderror.vim'
          echo ' * ruby-3.3 change NoMethodError format, cause test_ruby.vim fails.'
          echo ' * this test check if loose pattern match new Error message.'
          echo ' */'
          touch test_yy_nomethoderror_loose.vim
          cat <<'HERE_DOCUMENT_VIMTEST' | sed 's/^:\ //' > test_yy_nomethoderror_loose.vim
          : 
          : func Test_ruby_nomethoderror_format_ruby33_loose()
          :   call assert_fails('ruby print nil.hjkl',
          :         \           "NoMethodError: undefined method `hjkl' for nil")
          : endfunc
          : 
          HERE_DOCUMENT_VIMTEST
          echo '/* File: test_yy_rb_ary_detransient_missing.vim'
          echo ' * ruby-3.3 remove transient heap from array.c.'
          echo ' * +ruby/dyn with ruby-3.3 fails when do cmd `:ruby do-something`.'
          echo ' * this test check if `:ruby do-something` success or error with rb_ary_detrasient.'
          echo ' */'
          touch test_yy_rb_ary_detransient_missing.vim
          cat <<'HERE_DOCUMENT_VIMTEST' | sed 's/^:\ //' > test_yy_rb_ary_detransient_missing.vim
          : 
          : func Test_ruby_rb_ary_detransient_missing()
          :   try
          :     ruby puts RUBY_VERSION
          :   catch
          :     call assert_exception("E448: Could not load library function rb_ary_detransient",
          :               \           "expect E448 only for [nopatch,+ruby/dyn]")
          :   endtry
          : endfunc
          : 
          HERE_DOCUMENT_VIMTEST
          mv test_yy* ./patch_and_test

      - name: list patch and test
        if: false
        run: |
          ls ./patch_and_test

      - uses: actions/upload-artifact@v4
        id: upload-artifact-patches
        if: steps.patches.outcome == 'success' && steps.tests.outcome == 'success'
        with:
          compression-level: 0
          retention-days: 5
          path: |
            ./patch_and_test/

  patch_linux:
    needs: vim_patch
    runs-on: ubuntu-22.04
    outputs:
      outputlog: ${{ steps.upload-artifact-log.outputs.artifact-id }}

    env:
      # ref: v9.0.2138
      REF: fda700cb04612fe2f9301a9ba820309175decabf
      CONFIG: "--disable-gui --disable-libsodium --with-features=normal"
      LOGDIR: ./logdir

    strategy:
      fail-fast: false
      matrix:
        interp: [yes, dynamic]
        # interp: [dynamic]
        patch: [nopatch, patched]
        # patch: [patched]

    steps:
      - name: Prepare logdir to store and upload test result.
        run: mkdir ${{ env.LOGDIR }}

      - name: Checkout vim
        uses: actions/checkout@v4
        with:
          repository: svardew/vim
          ref: ${{ env.REF }}
          path: ./vim

      - name: Install ruby-3.3.0-rc1
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby-3.3.0-rc1

      - name: Set ruby-3.3 environment values
        id: rb33env
        if: true
        run: |
          which ruby
          ruby -v
          rb33libdir=$(ruby -rrbconfig -e 'print RbConfig::CONFIG["libdir"]')
          rb33pkgconfigdir=${rb33libdir}'/pkgconfig'
          echo "rb33_ldlibrarypath=${rb33libdir}" >> $GITHUB_OUTPUT
          echo "rb33_pkgconfigpath=${rb33pkgconfigdir}" >> $GITHUB_OUTPUT

      - name: Download patch and test from Artifact
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: check dl-artifact
        if: false
        run: |
          ls -R [a-uw-z]*
          #=> dl-artifact files is current dir, without upload time folder

      - name: matrix configure, build
        id: build
        if: true
        run: |
          export PKG_CONFIG_PATH=${{ steps.rb33env.outputs.rb33_pkgconfigpath }}
          export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          builddir=vim-${{ matrix.interp }}-${{ matrix.patch }}
          mkdir $builddir
          cd $builddir
          cp -R ../vim/* ./
          if ${{ matrix.patch == 'patched' }}; then
            patch src/if_ruby.c --input ../patch-if_ruby
            patch src/testdir/test_ruby.vim --input ../patch-test_ruby
          fi
          cp ../test_yy* ./src/testdir/
          ./configure ${{ env.CONFIG }} --enable-rubyinterp=${{ matrix.interp }}
          make
          ./src/vim --version
          echo "builddir=${builddir}" >> $GITHUB_OUTPUT

      - name: matrix test
        id: test
        if: true
        run: |
          if ${{ matrix.interp == 'dynamic' }}; then
            export LD_LIBRARY_PATH=${{ steps.rb33env.outputs.rb33_ldlibrarypath }}
          fi
          cd ${{ steps.build.outputs.builddir }}
          cd ./src/testdir
          make test_yy_nomethoderror_loose.res
          make test_yy_rb_ary_detransient_missing.res
          if ${{ matrix.patch == 'patched' }}; then
            make test_ruby.res
          fi
          echo '/* test_*.res exist?'
          echo ' */'
          ls -1 | grep -c -E 'test_.*.res$'
          echo '/* cat messages'
          echo ' */'
          cat messages
          cat messages | sed '/^\s*$/ d; /^From/ s:^:--> :' > messages-x
          mv messages-x ../../../logdir/messages-${{ matrix.interp }}-${{ matrix.patch }}

      - uses: actions/upload-artifact@v4
        id: upload-artifact-log
        with:
          name: messages-${{ matrix.interp }}-${{ matrix.patch }}
          compression-level: 0
          retention-days: 1
          path: |
            ./logdir/

      - name: Output artifact ID
        if: false
        run: |
          echo ${{ steps.upload-artifact-log.outputs.artifact-id }}, at steps.upload-artifact-log

      - name: close
        if: false
        run: |
          ls . -lahpgG

  patch_summary:
    # check patched +ruby and +ruby/dyn pass test_ruby.vim
    needs: patch_linux
    runs-on: ubuntu-latest

    steps:
      - name: noop
        if: false
        run: /bin/false

      - name: job.patch_linux info
        if: false
        env:
          OUTPUTLOG: ${{ needs.patch_linux.outputs.outputlog }}
        run: |
          echo "Artifact ID from job.patch_linux is [$OUTPUTLOG]"

      - name: Download messages from artifact.
        uses: actions/download-artifact@v4
        with:
          path: ./logdir
          merge-multiple: true

      - name: Display all artifacts
        run: |
          ls -R ./logdir

      - name: Show matrix test result
        if: true
        shell: bash {0}
        run: |
          cd ./logdir
          # ls . -1lagGp
          # echo ''
          echo '### matrix test result ...'
          echo ''
          for f in messages-*
          do
            echo '===' $f '==='
            cat $f | sed '/^\s*$/ d; /^From/ s:^:--> :'
            echo ''
          done

  linux-all:
    if: true
    runs-on: ubuntu-22.04
    needs: patch_summary
  # WIP: ci-for-linux from vim/vim/.github/workflow/ci.yml, build all linux #" {{{
  # TODO: modify interpreter use action/setup-foo, not system-package apps...

    env:
      CC: ${{ matrix.compiler }}
      GCC_VER: 13
      CLANG_VER: 17
      TEST: test
      SRCDIR: ./src
      LEAK_CFLAGS: -DEXITFREE
      LOG_DIR: ${{ github.workspace }}/logs
      TERM: xterm
      DISPLAY: ':99'
      DEBIAN_FRONTEND: noninteractive

    strategy:
      fail-fast: false
      matrix:
        features: [tiny, normal, huge]
        compiler: [clang, gcc]
        extra: [[]]
        # Only use non-native architecture when features != huge.
        # features=huge tries to install python3-dev, which fails to install
        # for the non-native architecture.
        architecture: [native]
        include:
          - features: tiny
            compiler: clang
            extra: [nogui]
          - features: tiny
            compiler: gcc
            extra: [nogui]
          - features: normal
            shadow: ./src/shadow
            compiler: gcc
            architecture: i386
          - features: huge
            coverage: true
          - features: huge
            compiler: clang
            interface: dynamic
            python3: stable-abi
          - features: huge
            compiler: gcc
            coverage: true
            interface: dynamic
            extra: [uchar, testgui]
          - features: huge
            compiler: clang
            # Lua5.1 is the most widely used version (since it's what LuaJIT is
            # compatible with), so ensure it works
            lua_ver: '5.1'
            extra: [asan]
          - features: huge
            compiler: gcc
            coverage: true
            extra: [unittests]
          - features: normal
            compiler: gcc
            extra: [vimtags]

    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: svardew/vim

      ###
      - name: PATCH, mkdir patch_and_test
        run: |
          mkdir patch_and_test
      - name: PATCH, download patch
        uses: actions/download-artifact@v4
        with:
          path: ./patch_and_test
          merge-multiple: true
      - name: PATCH, apply patch
        run: |
          patch src/if_ruby.c --input ./patch_and_test/patch-if_ruby
          patch src/testdir/test_ruby.vim --input ./patch_and_test/patch-test_ruby
      - name: PATCH, rmdir patch_and_test
        run: |
          rm -rf patch_and_test
      ###

      - name: Check Filelist (for packaging)
        run: |
          # If any files in the repository are not listed in Filelist this will
          # exit with an error code and list the missing entries.
          make -f ci/unlisted.make

      - run: sudo dpkg --add-architecture i386
        if: matrix.architecture == 'i386'


      ###
      - name: Install ruby-3.3.0-rc1
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby-3.3.0-rc1

      - name: Set ruby-3.3 environment values
        id: rb33env
        if: true
        run: |
          which ruby
          ruby -v
          rb33libdir=$(ruby -rrbconfig -e 'print RbConfig::CONFIG["libdir"]')
          rb33pkgconfigdir=${rb33libdir}'/pkgconfig'
          echo "rb33_ldlibrarypath=${rb33libdir}" >> $GITHUB_OUTPUT
          echo "rb33_pkgconfigpath=${rb33pkgconfigdir}" >> $GITHUB_OUTPUT
      ###

      - name: Install packages
        run: |
          PKGS=( \
            gettext \
            libgtk2.0-dev:${{ matrix.architecture }} \
            desktop-file-utils \
            libtool-bin \
            libncurses-dev:${{ matrix.architecture }} \
            libxt-dev:${{ matrix.architecture }} \
          )
          if ${{ matrix.features == 'huge' }}; then
            LUA_VER=${{ matrix.lua_ver || '5.4' }}
            PKGS+=( \
              autoconf \
              gdb \
              lcov \
              libcanberra-dev \
              libperl-dev \
              python2-dev \
              python3-dev \
              liblua${LUA_VER}-dev \
              lua${LUA_VER} \
              # ruby-dev \
              tcl-dev \
              cscope \
              libsodium-dev \
              attr \
              libattr1-dev
            )
          fi
          sudo apt-get update && sudo apt-get upgrade && sudo apt-get install -y "${PKGS[@]}"

      - name: Install gcc-${{ env.GCC_VER }}
        if:  matrix.compiler == 'gcc'
        run: |
          sudo apt-get install -y gcc-${{ env.GCC_VER }}:${{ matrix.architecture }}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_VER }} 100
          sudo update-alternatives --set gcc /usr/bin/gcc-${{ env.GCC_VER }}

      - name: Install clang-${{ env.CLANG_VER }}
        if: matrix.compiler == 'clang'
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          . /etc/lsb-release
          sudo add-apt-repository -y "deb http://apt.llvm.org/${DISTRIB_CODENAME}/ llvm-toolchain-${DISTRIB_CODENAME}-${{ env.CLANG_VER }} main"
          sudo apt-get install -y clang-${{ env.CLANG_VER }} llvm-${{ env.CLANG_VER }}
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.CLANG_VER }} 100
          sudo update-alternatives --set clang /usr/bin/clang-${{ env.CLANG_VER }}
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-${{ env.CLANG_VER }} 100
          sudo update-alternatives --install /usr/bin/asan_symbolize asan_symbolize /usr/bin/asan_symbolize-${{ env.CLANG_VER }} 100

      - name: Set up environment
        run: |
          mkdir -p "${LOG_DIR}"
          mkdir -p "${HOME}/bin"
          echo "${HOME}/bin" >> $GITHUB_PATH
          (
          echo "LINUX_VERSION=$(uname -r)"
          echo "NPROC=$(getconf _NPROCESSORS_ONLN)"
          echo "TMPDIR=${{ runner.temp }}"

          case "${{ matrix.features }}" in
          tiny)
            echo "TEST=testtiny"
            if ${{ contains(matrix.extra, 'nogui') }}; then
              echo "CONFOPT=--disable-gui"
            fi
            ;;
          normal)
            ;;
          huge)
            echo "PKG_CONFIG_PATH=$(ruby -rrbconfig -e 'print RbConfig::CONFIG[%q<libdir>]')/pkgconfig"
            echo "LD_LIBRARY_PATH=$(ruby -rrbconfig -e 'print RbConfig::CONFIG[%q<libdir>]')"
            echo "TEST=scripttests test_libvterm"
            INTERFACE=${{ matrix.interface || 'yes' }}
            if ${{ matrix.python3 == 'stable-abi' }}; then
              PYTHON3_CONFOPT="--with-python3-stable-abi=3.8"
            fi
            echo "CONFOPT=--enable-perlinterp=${INTERFACE} --enable-pythoninterp=${INTERFACE} --enable-python3interp=${INTERFACE} --enable-rubyinterp=${INTERFACE} --enable-luainterp=${INTERFACE} --enable-tclinterp=${INTERFACE} ${PYTHON3_CONFOPT}"
            ;;
          esac

          if ${{ matrix.coverage == true }}; then
            CFLAGS="${CFLAGS} --coverage -DUSE_GCOV_FLUSH"
            echo "LDFLAGS=--coverage"
          fi
          if ${{ contains(matrix.extra, 'uchar') }}; then
            CFLAGS="${CFLAGS} -funsigned-char"
          fi
          if ${{ contains(matrix.extra, 'testgui') }}; then
            echo "TEST=-C src testgui"
          fi
          if ${{ contains(matrix.extra, 'unittests') }}; then
            echo "TEST=unittests"
          fi
          if ${{ contains(matrix.extra, 'asan') }}; then
            echo "SANITIZER_CFLAGS=-g -O1 -DABORT_ON_INTERNAL_ERROR -DEXITFREE -fsanitize-recover=all -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer"
            echo "ASAN_OPTIONS=print_stacktrace=1 log_path=${LOG_DIR}/asan"
            echo "UBSAN_OPTIONS=print_stacktrace=1 log_path=${LOG_DIR}/ubsan"
            echo "LSAN_OPTIONS=suppressions=${GITHUB_WORKSPACE}/src/testdir/lsan-suppress.txt"
          fi
          if ${{ contains(matrix.extra, 'vimtags') }}; then
            echo "TEST=-C runtime/doc vimtags VIMEXE=../../${SRCDIR}/vim"
          fi
          echo "CFLAGS=${CFLAGS}"
          ) >> $GITHUB_ENV

      - name: Set up system
        run: |
          if [[ ${CC} = clang ]]; then
            # Use llvm-cov instead of gcov when compiler is clang.
            ln -fs /usr/bin/llvm-cov ${HOME}/bin/gcov
          fi
          sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=0
          sudo usermod -a -G audio "${USER}"
          sudo bash ci/setup-xvfb.sh

      - name: Set up snd-dummy
        if: (!(contains(matrix.extra, 'unittests') || contains(matrix.extra, 'vimtags')))
        env:
          DEST_DIR: ${{ env.TMPDIR }}/linux-modules-extra-${{ env.LINUX_VERSION }}
        uses: tecolicom/actions-use-apt-tools@main
        with:
          tools: linux-modules-extra-${{ env.LINUX_VERSION }}
          path: "${DEST_DIR}"

      - name: modprobe snd-dummy
        if: (!(contains(matrix.extra, 'unittests') || contains(matrix.extra, 'vimtags')))
        run: |
          sudo depmod --verbose
          sudo modprobe --verbose snd-dummy || true

      - name: Check autoconf
        if: contains(matrix.extra, 'unittests')
        run: |
          make -C src autoconf

      - name: Set up shadow dir
        if: matrix.shadow
        run: |
          make -C src shadow
          echo "SRCDIR=${{ matrix.shadow }}" >> $GITHUB_ENV
          echo "SHADOWOPT=-C ${{ matrix.shadow }}" >> $GITHUB_ENV

      - name: Configure
        run: |
          ./configure --with-features=${{ matrix.features }} ${CONFOPT} --enable-fail-if-missing
          # Append various warning flags to CFLAGS.
          sed -i -f ci/config.mk.sed ${SRCDIR}/auto/config.mk
          sed -i -f ci/config.mk.${CC}.sed ${SRCDIR}/auto/config.mk
          if [[ ${CC} = clang ]]; then
            # Suppress some warnings produced by clang 12 and later.
            sed -i -f ci/config.mk.clang-12.sed ${SRCDIR}/auto/config.mk
          fi

      - name: Build
        if: (!contains(matrix.extra, 'unittests'))
        run: |
          make ${SHADOWOPT} -j${NPROC}

      - name: Check version
        if: (!contains(matrix.extra, 'unittests'))
        run: |
          "${SRCDIR}"/vim --version
          "${SRCDIR}"/vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-1.vim -c quit
          "${SRCDIR}"/vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-2.vim -c quit

      - name: Test
        timeout-minutes: 25
        run: |
          do_test() { sg audio "sg $(id -gn) '$*'"; }
          do_test make ${SHADOWOPT} ${TEST}

      - name: Vim tags
        if: contains(matrix.extra, 'vimtags')
        run: |
          # This will exit with an error code if the generated vim tags differs from source.
          git diff --exit-code -- runtime/doc/tags

      - name: Generate gcov files
        if: matrix.coverage
        run: |
          cd "${SRCDIR}"
          find . -type f -name '*.gcno' -exec gcov -pb {} + || true

      - name: Codecov
        timeout-minutes: 20
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          flags: linux,${{ matrix.features }}-${{ matrix.compiler }}-${{ matrix.extra }}

      - name: ASan logs
        if: contains(matrix.extra, 'asan') && !cancelled()
        run: |
          for f in $(grep -lR '#[[:digit:]]* *0x[[:xdigit:]]*' "${LOG_DIR}"); do
            asan_symbolize -l "$f"
            false # in order to fail a job
          done
  # WIP: from vim/vim/.github/workflow/ci.yml, build all linux # }}}'

  # TODO: run vim/vim/.github/workflow/ci.yml at own repository, for mswin/macos.
  # modify vim/vim ci.yml to reusable-workflow
  linux:
    if: false
    needs: [patch_linux, patch_summary]
    runs-on: ubuntu-22.04
    steps:
      - run: ls .

  mswin:
    if: false
    needs: [patch_linux, patch_summary]
    runs-on: windows-latest
    steps:
      - run: dir .

  macos:
    if: false
    needs: [patch_linux, patch_summary]
    runs-on: macos-latest
    steps:
      - run: ls .


# vim: set tw=2 autoindent fdm=marker fmr="\ {{{,\ }}}' :
